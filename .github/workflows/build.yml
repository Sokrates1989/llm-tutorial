name: 🔧 Build and Push Docker Images

on:
  push:
    branches: [ main ]

env:
  FRONTEND_IMAGE: sokrates1989/ai-tut-frontend
  BACKEND_IMAGE: sokrates1989/ai-tut-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v3

      - name: 🧪 Load CI Environment Variables
        run: |
          while IFS='=' read -r key value
          do
            echo "$key=$value" >> $GITHUB_ENV
          done < .ci.env
      
      - name: 🔍 Debug ENV values
        run: |
          echo "BACKEND_PATH=$BACKEND_PATH"
          echo "BACKEND_IMAGE_VERSION=$BACKEND_IMAGE_VERSION"
          echo "FRONTEND_PATH=$FRONTEND_PATH"
          echo "FRONTEND_IMAGE_VERSION=$FRONTEND_IMAGE_VERSION"
          
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🚀 Build & Push Backend
        run: |
          docker buildx build --load \
            --build-arg IMAGE_TAG=$BACKEND_IMAGE_VERSION \
            -t $BACKEND_IMAGE:$BACKEND_IMAGE_VERSION \
            $BACKEND_PATH
          docker push $BACKEND_IMAGE:$BACKEND_IMAGE_VERSION

      - name: 🚀 Build & Push Frontend
        run: |
          docker buildx build --load \
            --build-arg VITE_IMAGE_TAG=$FRONTEND_IMAGE_VERSION \
            -t $FRONTEND_IMAGE:$FRONTEND_IMAGE_VERSION \
            $FRONTEND_PATH
          docker push $FRONTEND_IMAGE:$FRONTEND_IMAGE_VERSION

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: 🔐 Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy to Server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          BACKEND_IMAGE_VERSION: ${{ env.BACKEND_IMAGE_VERSION }}
          FRONTEND_IMAGE_VERSION: ${{ env.FRONTEND_IMAGE_VERSION }}
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" << EOF
            set -e

            cd /swarm/prod/react/ai-tut

            echo "📝 Updating .env with image versions..."
            sed -i 's/^BACKEND_IMAGE_VERSION=.*/BACKEND_IMAGE_VERSION='"$BACKEND_IMAGE_VERSION"'/' .env
            sed -i 's/^FRONTEND_IMAGE_VERSION=.*/FRONTEND_IMAGE_VERSION='"$FRONTEND_IMAGE_VERSION"'/' .env

            echo "🚢 Deploying stack..."
            docker stack deploy -c <(docker-compose -f docker-stack.yml config) ai-tut

            echo "⏳ Waiting for stack to stabilize..."
            sleep 30

            echo "🔍 Service status:"
            docker stack services ai-tut
          EOF